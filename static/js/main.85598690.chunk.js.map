{"version":3,"sources":["Components/Square.jsx","Components/Board.jsx","Components/Game.jsx","helpers.jsx","App.jsx","index.jsx"],"names":["style","background","border","fontSize","fontWeight","cursor","outline","Square","value","onClick","borderRadius","width","height","margin","display","gridTemplate","Board","squares","map","square","i","key","styles","Game","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","xIsNext","setXisNext","winner","lines","length","a","b","c","calculateWinner","timeInHistory","slice","current","_step","move","destination","step","App","ReactDOM","render","document","getElementById"],"mappings":"uLAEA,IAAMA,EAAQ,CACVC,WAAY,YACZC,OAAQ,qBACRC,SAAU,OACVC,WAAY,MACZC,OAAQ,UACRC,QAAS,QAWEC,EAPA,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,QAAT,OAEX,4BAAQT,MAAOA,EAAOS,QAASA,GAC1BD,ICZHR,EAAQ,CACZE,OAAQ,qBACRQ,aAAc,OACdC,MAAO,QACPC,OAAQ,QACRC,OAAQ,SACRC,QAAS,OACTC,aAAc,mCAWDC,EARD,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASR,EAAZ,EAAYA,QAAZ,OACZ,yBAAKT,MAAOA,GACTiB,EAAQC,KAAI,SAACC,EAAQC,GAAT,OACX,kBAAC,EAAD,CAAQC,IAAKD,EAAGZ,MAAOW,EAAQV,QAAS,kBAAMA,EAAQW,WCZtDE,EAAS,CACbX,MAAO,QACPE,OAAQ,aAoDKU,EAjDF,WAAO,IAAD,EACaC,mBAAS,CAACC,MAAM,GAAGC,KAAK,QADrC,mBACVC,EADU,KACDC,EADC,OAEmBJ,mBAAS,GAF5B,mBAEVK,EAFU,KAEEC,EAFF,OAGaN,oBAAS,GAHtB,mBAGVO,EAHU,KAGDC,EAHC,KAIXC,ECbD,SAAyBhB,GAW9B,IAVA,IAAMiB,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAd,EAAI,EAAGA,EAAIc,EAAMC,OAAQf,IAAK,CAAC,IAAD,cACnBc,EAAMd,GADa,GAC9BgB,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIrB,EAAQmB,IAAMnB,EAAQmB,KAAOnB,EAAQoB,IAAMpB,EAAQmB,KAAOnB,EAAQqB,GACpE,OAAOrB,EAAQmB,GAGnB,OAAO,KDJQG,CAAgBZ,EAAQE,IA8BvC,OACE,oCACE,kBAAC,EAAD,CAAOZ,QAASU,EAAQE,GAAapB,QA9BrB,SAACW,GACnB,IAAMoB,EAAgBb,EAAQc,MAAM,EAAGZ,EAAa,GAC9Ca,EAAUF,EAAcX,GACxBZ,EAAO,YAAOyB,GAEhBT,GAAUhB,EAAQG,KAEtBH,EAAQG,GAAKW,EAAU,IAAM,IAC7BH,EAAW,GAAD,mBAAKY,GAAL,CAAoBvB,KAC9Ba,EAAcU,EAAcL,QAC5BH,GAAYD,OAqBV,yBAAK/B,MAAOsB,GACV,2BACGW,EACG,WAAaA,EACb,iBAAmBF,EAAU,IAAM,MAhB7CJ,EAAQT,KAAI,SAACyB,EAAOC,GAClB,IAAMC,EAAcD,EAAI,qBAAiBA,GAAS,cAClD,OACE,wBAAIvB,IAAKuB,GACP,4BAAQnC,QAAS,kBATvBqB,EADcgB,EAUsBF,QARpCZ,EAAWc,EAAO,IAAM,GAFX,IAACA,IAU8BD,UEjCjCE,EAFH,kBAAM,kBAAC,EAAD,O,MCElBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.85598690.chunk.js","sourcesContent":["import React from \"react\";\n\nconst style = {\n    background: 'lightblue',\n    border: '2px solid darkblue',\n    fontSize: '30px',\n    fontWeight: '800',\n    cursor: 'pointer',\n    outline: 'none'\n\n};\n\nconst Square = ({value, onClick}) => (\n    \n    <button style={style} onClick={onClick}>\n        {value}\n    </button>\n);\n\nexport default Square;\n","import React from \"react\";\nimport Square from \"./Square\";\n\nconst style = {\n  border: \"4px solid darkblue\",\n  borderRadius: \"10px\",\n  width: \"250px\",\n  height: \"250px\",\n  margin: \"0 auto\",\n  display: \"grid\",\n  gridTemplate: \"repeat(3, 1fr) / repeat(3, 1fr)\",\n};\n\nconst Board = ({ squares, onClick }) => (\n  <div style={style}>\n    {squares.map((square, i) => (\n      <Square key={i} value={square} onClick={() => onClick(i)} />\n    ))}\n  </div>\n);\n\nexport default Board;\n","import React, { useState } from \"react\";\nimport { calculateWinner } from \"../helpers\";\nimport Board from \"./Board\";\n\nconst styles = {\n  width: \"200px\",\n  margin: \"20px auto\",\n};\n\nconst Game = () => {\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [stepNumber, setStepNumber] = useState(0);\n  const [xIsNext, setXisNext] = useState(true);\n  const winner = calculateWinner(history[stepNumber]);\n\n  const handleClick = (i) => {\n    const timeInHistory = history.slice(0, stepNumber + 1);\n    const current = timeInHistory[stepNumber];\n    const squares = [...current];\n    // If user click an occupied square or if game is won, return\n    if (winner || squares[i]) return;\n    // Put an X or an O in the clicked square\n    squares[i] = xIsNext ? \"X\" : \"O\";\n    setHistory([...timeInHistory, squares]);\n    setStepNumber(timeInHistory.length);\n    setXisNext(!xIsNext);\n  };\n\n  const jumpTo = (step) => {\n    setStepNumber(step);\n    setXisNext(step % 2 === 0);\n  };\n\n  const renderMoves = () =>\n    history.map((_step, move) => {\n      const destination = move ? `Go to move#${move}` : \"Go to start\";\n      return (\n        <li key={move}>\n          <button onClick={() => jumpTo(move)}>{destination}</button>\n        </li>\n      );\n    });\n\n  return (\n    <>\n      <Board squares={history[stepNumber]} onClick={handleClick} />\n      <div style={styles}>\n        <p>\n          {winner\n            ? \"Winner: \" + winner\n            : \"Next Player: \" + (xIsNext ? \"X\" : \"O\")}\n        </p>\n        {renderMoves()}\n      </div>\n    </>\n  );\n};\n\nexport default Game;\n","export function calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n// const squares = [\n//     null, null, null,\n//     'x', 'x', 'o',\n//     null, null, null\n// ];\n\n// console.log(calculateWinner(squares));\n","import React from \"react\";\nimport Game from \"./Components/Game\";\n\nconst App = () => <Game />;\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}